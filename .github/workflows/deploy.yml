name: Build and Deploy to Windows VM

on:
  push:
    branches:
      - main
      - develop
      - release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0'

    - name: Build application
      run: |
        dotnet build -c Release
        dotnet publish -c Release -o ./publish
    
    - name: Run SonarQube Analysis
      id: sonar_scan
      uses: sonarsource/sonarqube-scan-action@v3.0.0
      with:
        projectBaseDir: .
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_PROJECT_KEY: dot-net-sample 

    - name: Check Quality Gate
      id: quality_gate
      run: |
        status=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
          "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=dot-net-sample" \
          | jq -r .projectStatus.status)
        echo "Quality Gate status: $status"
        if [ "$status" != "OK" ]; then
          echo "Quality Gate failed: $status"
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: app-artifacts
        path: ./publish

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This ensures that the deploy job only runs if the build job succeeds
    steps:
    - name: Set environment for PROD
      if: github.ref == 'refs/heads/main'
      run: echo "ENVIRONMENT=prod" >> $GITHUB_ENV
    
    - name: Set environment for DEV
      if: github.ref == 'refs/heads/develop'
      run: echo "ENVIRONMENT=dev" >> $GITHUB_ENV

    - name: Set environment for UAT
      if: github.ref == 'refs/heads/release'
      run: echo "ENVIRONMENT=uat" >> $GITHUB_ENV
      
    - name: Create directory for artifacts
      run: mkdir -p ./my-artifacts

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: app-artifacts
        path: ./my-artifacts

    - name: Debug:List files in the artifact directory
      run: |
        echo "Artifact path: $(pwd)/my-artifacts"
        ls -l ./my-artifacts
        
    - name: Create ZIP file
      run: |
        cd ./my-artifacts
        zip -r ../app.zip ./*
        cd ..
    
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
    
    - name: Add the VM to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
    
    - name: Ensure deployment directory exists on the VM
      run: |
        ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          powershell -Command "if (-Not (Test-Path -Path 'D:/abhi_deployments/${ENVIRONMENT}/${GITHUB_SHA}')) { New-Item -Path 'D:/abhi_deployments/${ENVIRONMENT}/${GITHUB_SHA}' -ItemType Directory }"
        EOF

    - name: Manage Previous Deployments (Keep Last 3)
      run: |
        ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          powershell -Command "
          \$deploymentDir = 'D:/abhi_deployments/${ENVIRONMENT}'
          \$deployments = Get-ChildItem -Path \$deploymentDir | Sort-Object LastWriteTime -Descending
          if (\$deployments.Count -gt 3) {
            \$deployments | Select-Object -Skip 3 | Remove-Item -Recurse -Force
          }
          "
        EOF
        
    - name: Upload artifact to VM via SCP
      run: |
        scp -i ~/.ssh/id_rsa -P 22 ./app.zip ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/D:/abhi_deployments/
    
    - name: Deploy application on VM via SSH
      run: |
        ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          powershell -Command "
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          Expand-Archive -Path 'D:/abhi_deployments/${ENVIRONMENT}/${GITHUB_SHA}/app.zip' -DestinationPath 'D:/abhi_deployments/${ENVIRONMENT}/${GITHUB_SHA}/app' -Force
          Remove-Item -Path 'D:/abhi_deployments/${ENVIRONMENT}/${GITHUB_SHA}/app.zip' -Force
          Copy-Item -Path 'D:/abhi_deployments/${ENVIRONMENT}/${GITHUB_SHA}/app/*' -Destination 'C:/inetpub/wwwroot' -Recurse -Force
          "
        EOF
