name: Build and Deploy to Windows VM

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the 'main' branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest  # Use a Linux runner for the GitHub Actions workflow
    environment: dev_abhi
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0'  # Adjust to your .NET version

    - name: Build application
      run: |
        dotnet build -c Release
        dotnet publish -c Release -o ./publish
    
    # - name: Install SonarQube Scanner
    #   run: |
    #     wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
    #     unzip sonar-scanner-cli-4.8.0.2856-linux.zip -d $HOME/sonar-scanner
    #     export PATH="$HOME/sonar-scanner/sonar-scanner-4.8.0.2856-linux/bin:$PATH"

    - name: Run SonarQube Analysis
      uses: sonarsource/sonarqube-scan-action@v3.0.0
      with:
        projectBaseDir: .  # The root directory of your project
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_PROJECT_KEY: dot-net-sample 
    
    - name: Create ZIP file
      run: |
        cd ./publish
        zip -r ../app.zip .
        cd ..
    
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
    
    - name: Add the VM to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
    
    - name: Upload artifact to VM via SCP
      run: |
        scp -i ~/.ssh/id_rsa -P 22 ./app.zip ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/D:/abhi_deployments/
    
    # - name: Approval step
    #   if: github.event_name == 'workflow_dispatch'
    #   run: echo "Waiting for manual approval..."
    #   env:
    #     MANUAL_APPROVAL: ${{ secrets.MANUAL_APPROVAL }}
    
    # - name: Deploy application on VM via SSH
    #   run: |
    #     ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
    #       # Ensure PowerShell script execution is enabled
    #       Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          
    #       # Extract the ZIP file
    #       Expand-Archive -Path D:/abhi_deployments/app.zip -DestinationPath D:/abhi_deployments/app -Force
          
    #       # Remove the ZIP file
    #       Remove-Item -Path D:/abhi_deployments/app.zip
          
    #       # Copy files to the IIS directory
    #       Copy-Item -Path D:/abhi_deployments/app/* -Destination C:/inetpub/wwwroot -Recurse -Force
    #     EOF
